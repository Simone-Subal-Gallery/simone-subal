'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const defu2 = require('defu');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const defu2__default = /*#__PURE__*/_interopDefaultLegacy(defu2);

const apiHost = "api.sanity.io";
const cdnHost = "apicdn.sanity.io";
const enc = encodeURIComponent;
function getQuery(query, params = {}) {
  const baseQs = `?query=${enc(query)}`;
  return Object.keys(params).reduce((current, param) => {
    return `${current}&${enc(`$${param}`)}=${enc(JSON.stringify(params[param]))}`;
  }, baseQs);
}
const getByteSize = (query) => encodeURI(query).split(/%..|./).length;
function createClient(config) {
  const {projectId, dataset, useCdn, withCredentials, token} = config;
  const fetchOptions = {
    credentials: withCredentials ? "include" : "omit",
    headers: {
      ...token ? {
        Authorization: `Bearer ${token}`
      } : {},
      Accept: "application/json",
      ...process.server ? {"accept-encoding": "gzip, deflate"} : {}
    }
  };
  return {
    clone: () => createClient({projectId, dataset, useCdn, withCredentials, token}),
    async fetch(query, params) {
      const qs = getQuery(query, params);
      const usePostRequest = getByteSize(qs) > 9e3;
      const host = useCdn && !usePostRequest ? cdnHost : apiHost;
      const response = usePostRequest ? await fetch(`https://${projectId}.${host}/v1/data/query/${dataset}`, {
        method: "post",
        body: JSON.stringify({query, params}),
        ...fetchOptions,
        headers: {
          ...fetchOptions.headers,
          "Content-Type": "application/json"
        }
      }) : await fetch(`https://${projectId}.${host}/v1/data/query/${dataset}${qs}`, fetchOptions);
      const {result} = await response.json();
      return result;
    }
  };
}

const groq = String.raw || ((strings, ...keys) => {
  const lastIndex = strings.length - 1;
  return strings.slice(0, lastIndex).reduce((query, currentString, index) => query + currentString + keys[index], "") + strings[lastIndex];
});

const isNuxtBuild = process.client || process.server;
const isProd = process.env.NODE_ENV === "production";
const DEFAULTS = {
  contentHelper: true,
  imageHelper: true,
  dataset: "production",
  withCredentials: false,
  additionalClients: {}
};
const CONFIG_KEY = "sanity";
function validateConfig({projectId, dataset}) {
  if (isNuxtBuild)
    return;
  const {bold} = process.client ? {} : require("chalk");
  const consola = process.client ? {} : require("consola");
  if (!projectId) {
    consola.warn(`Make sure you specify a ${bold("projectId")} in your sanity config.`);
    return false;
  } else {
    consola.info(`Enabled ${bold("@nuxtjs/sanity")} for project ${bold(projectId)} (${bold(dataset)}).`);
    return true;
  }
}
const nuxtModule = function(moduleOptions) {
  if (isNuxtBuild)
    return;
  const {bold} = process.client ? {} : require("chalk");
  const consola = process.client ? {} : require("consola");
  const {join, resolve} = process.client ? {} : require("upath");
  let sanityConfig = {};
  try {
    const fs = process.client ? {} : require("fs-extra");
    const {projectId, dataset} = fs.readJSONSync(resolve(this.options.rootDir, "./sanity.json")).api;
    sanityConfig = {projectId, dataset};
  } catch (e) {
  }
  const options = defu2__default['default'](this.options[CONFIG_KEY], moduleOptions, sanityConfig, {useCdn: isProd && !moduleOptions.token && (!this.options[CONFIG_KEY] || !this.options[CONFIG_KEY].token)}, DEFAULTS);
  if (!validateConfig(options)) {
    return;
  }
  try {
    if (!options.minimal) {
      options.minimal = !this.nuxt.resolver.requireModule("@sanity/client");
    }
  } catch (e) {
    options.minimal = true;
    consola.warn(`Not using ${bold("@sanity/client")} as it cannot be resolved in your project dependencies.
       Try running ${bold("yarn add @sanity/client")} or ${bold("npm install @sanity/client")}.
       To disable this warning, set ${bold("sanity: { minimal: true }")} in your nuxt.config.js.`);
  }
  this.options[CONFIG_KEY] = options;
  const autoregister = !!this.options.components;
  this.addPlugin({
    src: resolve(__dirname, "../templates/plugin.js"),
    fileName: "sanity/plugin.js",
    options: {
      client: !options.minimal,
      components: {
        autoregister,
        imageHelper: options.imageHelper,
        contentHelper: options.contentHelper
      },
      sanityConfig: JSON.stringify({
        useCdn: options.useCdn,
        projectId: options.projectId,
        dataset: options.dataset,
        withCredentials: options.withCredentials,
        token: options.token
      }),
      additionalClients: JSON.stringify(options.additionalClients)
    }
  });
  if (autoregister) {
    this.nuxt.hook("components:dirs", (dirs) => {
      dirs.push({
        path: join(__dirname, "components"),
        extensions: ["js"]
      });
    });
  }
  this.options.build.transpile = this.options.build.transpile || [];
  this.options.build.transpile.push(/^@nuxtjs[\\/]sanity/);
};
nuxtModule.meta = {name: "@nuxtjs/sanity"};

exports.createClient = createClient;
exports.default = nuxtModule;
exports.getByteSize = getByteSize;
exports.getQuery = getQuery;
exports.groq = groq;
